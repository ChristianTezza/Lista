#include <stdio.h>
#include <stdlib.h>

#define MAX 100

// Função para o Bucket Sort
void bucketSort(float arr[], int n) {
    int i, j, k;
    int buckets[MAX] = {0};

    for (i = 0; i < n; i++) {
        buckets[(int)(arr[i])]++;
    }

    for (i = 0, j = 0; i < MAX; i++) {
        for (k = 0; k < buckets[i]; k++) {
            arr[j++] = i;
        }
    }
}

// Função para busca por interpolação
int interpolationSearch(float arr[], int n, float x) {
    int low = 0, high = n - 1;

    while (low <= high && x >= arr[low] && x <= arr[high]) {
        int pos = low + ((x - arr[low]) * (high - low)) / (arr[high] - arr[low]);

        if (arr[pos] == x) {
            return pos;
        } else if (arr[pos] < x) {
            low = pos + 1;
        } else {
            high = pos - 1;
        }
    }
    return -1;
}

int main() {
    float grades[] = {85.5, 72.3, 90.8, 60.2, 75.6};
    int n = sizeof(grades) / sizeof(grades[0]);
    float targetGrade = 75.6;

    printf("Notas originais:\n");
    for (int i = 0; i < n; i++) {
        printf("%.1f ", grades[i]);
    }
    printf("\n");

    bucketSort(grades, n);

    printf("Notas ordenadas:\n");
    for (int i = 0; i < n; i++) {
        printf("%.1f ", grades[i]);
    }
    printf("\n");

    int result = interpolationSearch(grades, n, targetGrade);

    if (result != -1) {
        printf("Nota %.1f encontrada na posição %d.\n", targetGrade, result);
    } else {
        printf("Nota %.1f não encontrada.\n", targetGrade);
    }

    return 0;
}
